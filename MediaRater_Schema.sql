USE master
GO

IF EXISTS (SELECT 1 FROM sys.databases WHERE name = 'MediaRater')
BEGIN
	DROP DATABASE MediaRater
END

CREATE DATABASE MediaRater
GO

USE MediaRater
GO

CREATE TABLE ROLES
(
	ROLEID INT IDENTITY(1,1) PRIMARY KEY,
	ROLE VARCHAR(50)
)

SET IDENTITY_INSERT ROLES ON
INSERT INTO ROLES (ROLEID, ROLE) VALUES
	(1, 'DEFAULT'),
	(2, 'MODERATOR'),
	(3, 'ADMIN'),
	(4, 'OWNER')
SET IDENTITY_INSERT ROLES OFF

CREATE TABLE USERS
(
	USERID INT IDENTITY(1,1) PRIMARY KEY,
	USERNAME VARCHAR(50) UNIQUE,
	PASSWORD NVARCHAR(255),
	FIRSTNAME NVARCHAR(55),
	LASTNAME NVARCHAR(55),
	EMAILADDRESS VARCHAR(100),
	SALT VARCHAR(100),
	ROLEID INT FOREIGN KEY REFERENCES ROLES(ROLEID)
)
GO

CREATE INDEX IX_USERS_USERNAME_SALT_PASSWORD_ROLE ON USERS (USERNAME, SALT, PASSWORD, ROLEID)
GO

SET IDENTITY_INSERT USERS ON
INSERT INTO USERS (USERID, USERNAME, PASSWORD, FIRSTNAME, LASTNAME, EMAILADDRESS, SALT, ROLEID) VALUES
(1, 'Skylar6288', 'Password@123', 'Matthew', 'Dunavant', 'MaDunavant@gmail.com', 'testSalt', 4),
(2, 'BaldEagle666', 'Password@123', 'Chris', 'Dunavant', 'ChrisWDunav@gmail.com', 'testSalt', 3)
SET IDENTITY_INSERT USERS OFF

CREATE TABLE MEDIATYPE
(
	TYPEID INT IDENTITY(1,1) PRIMARY KEY,
	TYPE VARCHAR(255) NOT NULL
)

SET IDENTITY_INSERT MEDIATYPE ON
INSERT INTO MEDIATYPE (TYPEID, TYPE) VALUES
	(1, 'Book')
	,(2, 'Movie')
	,(3, 'Music')
SET IDENTITY_INSERT MEDIATYPE OFF

CREATE TABLE MEDIA
(
	ID INT IDENTITY(1,1) PRIMARY KEY,
	TITLE NVARCHAR(60) NOT NULL,
	MEDIATYPEID INT FOREIGN KEY REFERENCES MEDIATYPE(TYPEID),
	YEARRELEASED INT,
	DESCRIPTION NVARCHAR(MAX),
	IMAGEURL VARCHAR(400)
)
GO

CREATE INDEX IX_MEDIA_TITLE ON MEDIA (TITLE) INCLUDE (YEARRELEASED, DESCRIPTION, IMAGEURL)
GO

SET IDENTITY_INSERT MEDIA ON
INSERT INTO MEDIA (ID, TITLE, MEDIATYPEID, YEARRELEASED, DESCRIPTION, IMAGEURL) VALUES
(1, 'Harry Potter and the Chamber of Secrets', 1, 1998, 'Harry Potter and the Chamber of Secrets is a fantasy novel written by British author J. K. Rowling and the second novel in the Harry Potter series. The plot follows Harry''s second year at Hogwarts School of Witchcraft and Wizardry, during which a series of messages on the walls of the school''s corridors warn that the "Chamber of Secrets" has been opened and that the "heir of Slytherin" would kill all pupils who do not come from all-magical families. These threats are found after attacks that leave residents of the school petrified. Throughout the year, Harry and his friends Ron and Hermione investigate the attacks.', 'https://upload.wikimedia.org/wikipedia/en/thumb/5/5c/Harry_Potter_and_the_Chamber_of_Secrets.jpg/220px-Harry_Potter_and_the_Chamber_of_Secrets.jpg'),
(2, 'Harry Potter and the Chamber of Secrets', 2, 2002, 'Harry Potter and the Chamber of Secrets is a 2002 fantasy film directed by Chris Columbus and distributed by Warner Bros. Pictures, based on J. K. Rowling''s 1998 novel of the same name. Produced by David Heyman and written by Steve Kloves, it is the sequel to Harry Potter and the Philosopher''s Stone (2001) and the second instalment in the Harry Potter film series. The film stars Daniel Radcliffe as Harry Potter, with Rupert Grint as Ron Weasley, and Emma Watson as Hermione Granger. Its story follows Harry Potter''s second year at Hogwarts School of Witchcraft and Wizardry as the Heir of Salazar Slytherin opens the Chamber of Secrets, unleashing a monster that petrifies the school''s denizens.', 'https://upload.wikimedia.org/wikipedia/en/thumb/c/c0/Harry_Potter_and_the_Chamber_of_Secrets_movie.jpg/220px-Harry_Potter_and_the_Chamber_of_Secrets_movie.jpg')
SET IDENTITY_INSERT MEDIA OFF

CREATE TABLE MEDIARATINGS
(
	USERID INT FOREIGN KEY REFERENCES USERS(USERID),
	MEDIAID INT FOREIGN KEY REFERENCES MEDIA(ID),
	RATING INT NOT NULL,
	PRIMARY KEY (USERID, MEDIAID)
)
GO

INSERT INTO MEDIARATINGS (USERID, MEDIAID, RATING) VALUES
(1, 1, 9),
(1, 2, 7),
(2, 1, 8),
(2, 2, 10)

CREATE TABLE COMMENTS
(
	COMMENTID INT IDENTITY(1,1) PRIMARY KEY,
	PARENTID INT FOREIGN KEY REFERENCES COMMENTS(COMMENTID) NULL,
	TEXT NVARCHAR(MAX),
	DELETED BIT DEFAULT 0,
	CREATEDDATE DATETIME DEFAULT GETDATE(),
	MODIFIEDBY VARCHAR(50) DEFAULT NULL,
	MODIFIEDDATE DATETIME DEFAULT NULL
)
GO

CREATE INDEX IX_COMMENTS_COMMENTID_PARENTID ON COMMENTS (COMMENTID, PARENTID) INCLUDE (TEXT, DELETED, CREATEDDATE, MODIFIEDBY, MODIFIEDDATE)
GO

SET IDENTITY_INSERT COMMENTS ON
INSERT INTO COMMENTS (COMMENTID, PARENTID, TEXT, DELETED, CREATEDDATE, MODIFIEDBY, MODIFIEDDATE) VALUES
(1, NULL, 'This book was Awesome!', 0, '2020-09-08 17:32:43', NULL, NULL),
(2, 1, 'Slay that snake, Harry.', 0, '2020-09-08 17:46:23', NULL, NULL),
(3, NULL, 'This book is my jam', 1, '2020-09-08 17:43:16', 'BaldEagle666', '2020-09-08 18:18:18'),
(4, 3, 'What did it say?', 0, '2020-09-09 08:14:59', NULL, NULL),
(5, 4, 'PEANUT BUTTER JELLY TIME!', 0, '2020-09-10 18:01:01', NULL, NULL)
SET IDENTITY_INSERT COMMENTS ON

CREATE TABLE USERMEDIACOMMENTS
(
	USERID INT FOREIGN KEY REFERENCES USERS(USERID),
	MEDIAID INT FOREIGN KEY REFERENCES MEDIA(ID),
	COMMENTID INT FOREIGN KEY REFERENCES COMMENTS(COMMENTID),
	PRIMARY KEY (USERID,MEDIAID,COMMENTID)
)
GO

INSERT INTO USERMEDIACOMMENTS VALUES
(1,1,1),
(2,1,2),
(2,1,3),
(1,1,4),
(2,1,5)
GO

CREATE PROCEDURE usp_insUSERS
	@USERNAME VARCHAR(50),
	@PASSWORD NVARCHAR(255),
	@FIRSTNAME NVARCHAR(55),
	@LASTNAME NVARCHAR(55),
	@EMAILADDRESS VARCHAR(100),
	@SALT VARCHAR(100),
	@ROLEID VARCHAR(100)
AS
BEGIN
	INSERT INTO USERS (USERNAME, PASSWORD, FIRSTNAME, LASTNAME, EMAILADDRESS, SALT, ROLEID)
	VALUES (@USERNAME, @PASSWORD, @FIRSTNAME, @LASTNAME, @EMAILADDRESS, @SALT, @ROLEID)
END
GO

CREATE PROCEDURE usp_updUSERS
	@USERID INT,
	@FIRSTNAME NVARCHAR(55),
	@LASTNAME NVARCHAR(55),
	@EMAILADDRESS VARCHAR(100)
AS
BEGIN
	UPDATE USERS
	SET FIRSTNAME = @FIRSTNAME
		,LASTNAME = @LASTNAME
		,EMAILADDRESS = @EMAILADDRESS
	WHERE USERID = @USERID
END
GO

CREATE PROCEDURE usp_updUSERS_ROLE
	@USERID INT,
	@ROLEID INT
AS
BEGIN
	UPDATE USERS
	SET ROLEID = @ROLEID
	WHERE USERID = @USERID
END
GO

CREATE PROCEDURE usp_updUSERS_PASSWORD
	@USERID INT,
	@PASSWORD NVARCHAR(255)
AS
BEGIN
	UPDATE USERS
	SET PASSWORD = @PASSWORD
	WHERE USERID = @USERID
END
GO

CREATE PROCEDURE usp_delUSER
	@USERID INT
AS
BEGIN
	DELETE FROM USERS WHERE USERID = @USERID
END
GO

CREATE PROCEDURE usp_insMEDIA
	@TITLE NVARCHAR(60),
	@MEDIATYPEID INT,
	@YEARRELEASED INT,
	@DESCRIPTION NVARCHAR(MAX),
	@IMAGEURL VARCHAR(200)
AS
BEGIN
	INSERT INTO MEDIA (TITLE, MEDIATYPEID, YEARRELEASED, DESCRIPTION, IMAGEURL) 
	VALUES (@TITLE, @MEDIATYPEID, @YEARRELEASED, @DESCRIPTION, @IMAGEURL)
END
GO

CREATE PROCEDURE usp_updMEDIA
	@MEDIAID INT,
	@TITLE NVARCHAR(60),
	@MEDIATYPEID INT,
	@YEARRELEASED INT,
	@DESCRIPTION NVARCHAR(MAX),
	@IMAGEURL VARCHAR(200)
AS
BEGIN
	UPDATE MEDIA
	SET TITLE = @TITLE
		,MEDIATYPEID = @MEDIATYPEID
		,YEARRELEASED = @YEARRELEASED
		,DESCRIPTION = @DESCRIPTION
		,IMAGEURL = @IMAGEURL
	WHERE ID = @MEDIAID
END
GO

CREATE PROCEDURE usp_delMEDIA
	@MEDIAID INT
AS
BEGIN
	DELETE FROM MEDIA WHERE ID = @MEDIAID
END
GO

CREATE PROCEDURE usp_insCOMMENT
	@USERID INT,
	@MEDIAID INT,
	@PARENTID INT,
	@TEXT NVARCHAR(MAX)
AS
BEGIN
	DECLARE @COMMENT TABLE (COMMENTID INT)

	INSERT INTO COMMENTS (PARENTID, TEXT) OUTPUT (INSERTED.COMMENTID) INTO @COMMENT VALUES (@PARENTID, @TEXT)

	INSERT INTO USERMEDIACOMMENTS (USERID, MEDIAID, COMMENTID) 
	SELECT @USERID, @MEDIAID, COMMENTID FROM @COMMENT
END
GO

CREATE PROCEDURE usp_updCOMMENT
	@COMMENTID INT,
	@TEXT NVARCHAR(MAX)
AS
BEGIN
	UPDATE COMMENTS
	SET TEXT = @TEXT
	WHERE COMMENTID = @COMMENTID
END
GO

CREATE PROCEDURE usp_delCOMMENT
	@COMMENTID INT
AS
BEGIN
	UPDATE COMMENTS
	SET DELETED = 1
	WHERE COMMENTID = @COMMENTID
END
GO

CREATE PROCEDURE usp_getChildCOMMENTS
	@COMMENTID INT
AS
BEGIN
	;WITH COMMENT_Tree AS (
    SELECT c.COMMENTID, c.PARENTID
    FROM COMMENTS c
	WHERE COMMENTID = @COMMENTID
    UNION ALL
    SELECT c.COMMENTID, c.PARENTID
    FROM COMMENTS c
		JOIN COMMENT_Tree t ON c.PARENTID = t.COMMENTID
	)
	
	SELECT c.COMMENTID
		,c.PARENTID
		,c.TEXT
		,c.DELETED
		,COALESCE(c.MODIFIEDDATE, c.CREATEDDATE) MODIFIEDDATE
		,u.USERNAME
	FROM COMMENTS c
		JOIN COMMENT_Tree t ON c.COMMENTID = t.COMMENTID
		JOIN USERMEDIACOMMENTS umc on c.COMMENTID = umc.COMMENTID
		JOIN USERS u on umc.USERID = u.USERID
	ORDER BY PARENTID, COMMENTID
END